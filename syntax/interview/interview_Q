·什么是闭包？闭包有什么缺陷？
    闭包就是一个方法和它绑定运行的上下文；闭包最核心的缺陷就是很容易引起内存逃逸，内存逃逸是指创建一个对象的时候，它有时候会分配到栈上，有时候会分配到
堆上，分配到堆上就被称之为内存逃逸，这个对象是不会被垃圾回收的，这样会比较慢，比较耗性能。
·什么时候会出现栈溢出？
    无限循环，递归没有终止条件，没有中断机制
·什么是不定参数？调用方法的时候，不定参数可以传入0个值吗？方法内部怎么使用不定参数？
    不定参数是指最后一个参数，可以传入任意多个值；可以；不定参数在方法内部可以当作切片来使用
·什么是defer？你能解释一下的defer运作机制吗？
    defer是指在程序返回前，执行一段代码（逻辑），也可以称为延迟调用。（defer的作用）
    defer的运作机制有三种：
    ·堆上分配：是指整个defer直接分配到堆上，缺点就是要被GC(垃圾回收)管理。增加垃圾回收的工作量，降低性能。先进后出
    ·栈上分配：整个defer分配到goroutine栈上，不需要被GC管理。比堆上分配性能提升了30%。栈上分配只能有一个defer
    ·开放编码（Open Code）：启用内联的优化，直观理解就是相当于把defer内容放到了函数最后。启用条件：
        ·函数的defer数量少于等于8个；用了一个byte来记录哪些defer要执行
        ·函数的defer关键字不能在循环中执行；编译的时候不知道有多少个defer。
        ·函数的return语句与defer语句的乘积小于或等于15个。
    优先使用开放编码，其次是栈上分配，最后再考虑堆上分配
·一个方法内部defer能不能超过8个？
    可以，超过8个就会换一种底层实现方式
·defer内部能不能修改返回值？怎么改？
    能；前提是带名字的返回值和返回值是一个指针是可以改的，局部变量声明的返回值不可以改
·数组和切片有什么区别？
    没什么区别；切片可以看作是数组的二次封装；切片支持make,append和扩容操作，数组不支持
·切片怎么扩容的？
    切片扩容的原理，就是重新分配一段连续内存，然后把原本的数据拷贝过去。
    切片扩容的系数，总结为：
    ·当容量小于256的时候，两倍扩容；
    ·否则，按照1.25扩容
    扩多了浪费内存，扩少了频繁扩容，因此设计者做了一个权衡，
·在GO语言里面，尽量让对象分配到栈上，到堆上的话，就是内存逃逸。